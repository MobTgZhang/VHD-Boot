#!/usr/bin/ash

udevd_running=0
mount_handler=default_mount_handler
init=/sbin/init
rd_logmask=0

. /init_functions

mount_setup

# parse the kernel command line
parse_cmdline </proc/cmdline

# setup logging as early as possible
rdlogger_start

for d in ${disablehooks//,/ }; do
    [ -e "/hooks/$d" ] && chmod 644 "/hooks/$d"
done

. /config

run_hookfunctions 'run_earlyhook' 'early hook' $EARLYHOOKS

if [ -n "$earlymodules$MODULES" ]; then
    modprobe -qab ${earlymodules//,/ } $MODULES
fi

run_hookfunctions 'run_hook' 'hook' $HOOKS

# honor the old behavior of break=y as a synonym for break=premount
if [ "${break}" = "y" ] || [ "${break}" = "premount" ]; then
    echo ":: Pre-mount break requested, type 'exit' to resume operation"
    launch_interactive_shell
fi



	########################################################################
	###                   BOOT FROM VHD, VLOOP by niumao                 ###
	########################################################################

for x in $(cat /proc/cmdline); do

	case $x in

	vloop=*)
		VLOOP="${x#vloop=}"
		;;
	vlooppart=*)
		VLOOPPART="${x#vlooppart=}"
		;;	
	esac
done

if [ "$VLOOP" ]; then
		
        mkdir -p /host
        if  [ -x /sbin/blkid ]; then
		HOSTFSTYPE=$(/sbin/blkid -s TYPE -o value "${root}")
		[ -z "${HOSTFSTYPE}" -o  "${HOSTFSTYPE}"="ntfs" ] && HOSTFSTYPE="ntfs-3g"
	fi
	mount -t ${HOSTFSTYPE} -o rw  ${root} /host

	str=${VLOOP}

	disk_files="/host${str}"			
		
	# FIXME This has no error checking
	modprobe loop
	partx -av "${disk_files}"
	sleep 3

       	root="/dev/loop0${VLOOPPART}"

fi 

  	########################################################################
	###                 End,  BOOT FROM VHD, VLOOP by niumao             ###
	########################################################################

rootdev=$(resolve_device "$root") && root=$rootdev
unset rootdev

fsck_root

# Mount root at /new_root
"$mount_handler" /new_root



	########################################################################
	###                   BOOT FROM VHD, VLOOP by niumao                 ###
	########################################################################
		
		if [ -n "$VLOOP" -a -d /new_root/host ]; then
			mount -M /host /new_root/host
		fi
	
  	########################################################################
	###                 End,  BOOT FROM VHD, VLOOP by niumao             ###
	########################################################################











run_hookfunctions 'run_latehook' 'late hook' $LATEHOOKS
run_hookfunctions 'run_cleanuphook' 'cleanup hook' $CLEANUPHOOKS

if [ "$(stat -c %D /)" = "$(stat -c %D /new_root)" ]; then
    # Nothing got mounted on /new_root. This is the end, we don't know what to do anymore
    # We fall back into a shell, but the shell has now PID 1
    # This way, manual recovery is still possible.
    err "Failed to mount the real root device."
    echo "Bailing out, you are on your own. Good luck."
    echo
    launch_interactive_shell --exec
elif [ ! -x "/new_root${init}" ]; then
    # Successfully mounted /new_root, but ${init} is missing
    # The same logic as above applies
    err "Root device mounted successfully, but ${init} does not exist."
    echo "Bailing out, you are on your own. Good luck."
    echo
    launch_interactive_shell --exec
fi

if [ "${break}" = "postmount" ]; then
    echo ":: Post-mount break requested, type 'exit' to resume operation"
    launch_interactive_shell
fi

# this should always be the last thing we do before the switch_root.
rdlogger_stop

exec env -i \
    "TERM=$TERM" \
    /usr/bin/switch_root /new_root $init "$@"

# vim: set ft=sh ts=4 sw=4 et:
